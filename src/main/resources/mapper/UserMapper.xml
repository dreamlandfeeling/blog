<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xin.yxblog.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.xin.yxblog.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="BIT"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="com.xin.yxblog.model.User" extends="BaseResultMap">
    </resultMap>

    <sql id="Base_Column_List">
        <trim suffixOverrides=",">
            id,
            name,
            username,
            password,
            status,
        </trim>
    </sql>

    <select id="count" resultType="int">
        select
        count(*)
        from yx_user
        <where>
            <if test="id!=null and id!=''">and id = #{id,jdbcType=INTEGER}</if>
            <if test="name!=null and name!=''">and name = #{name,jdbcType=VARCHAR}</if>
            <if test="username!=null and username!=''">and username = #{username,jdbcType=VARCHAR}</if>
            <if test="password!=null and password!=''">and password = #{password,jdbcType=VARCHAR}</if>
            <if test="status!=null and status!=''">and status = #{status,jdbcType=BIT}</if>
        </where>
    </select>

	<select id="selectByUsernameAndPassword" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from yx_user
        where username = #{username} and password = #{password}
    </select>
	
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from yx_user
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from yx_user
        <where>
            <if test="id!=null and id!=''">and id = #{id,jdbcType=INTEGER}</if>
            <if test="name!=null and name!=''">and name = #{name,jdbcType=VARCHAR}</if>
            <if test="username!=null and username!=''">and username = #{username,jdbcType=VARCHAR}</if>
            <if test="password!=null and password!=''">and password = #{password,jdbcType=VARCHAR}</if>
            <if test="status!=null and status!=''">and status = #{status,jdbcType=BIT}</if>
        </where>
        <choose>
            <when test="sort != null and sort.trim() !=''">
                order by ${id} ${order}
            </when>
            <otherwise>
                order by id desc
            </otherwise>
        </choose>
        <if test="offset!=null and limit!=null">
            limit ${offset} , ${limit}
        </if>
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from yx_user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="batchRemove" parameterType="java.lang.Integer">
        delete from yx_user
        where id in
        <foreach collection="array" item="id" open="(" separator=","  close=")">
            #{id}
        </foreach>
    </delete>
    <insert id="insert" parameterType="com.xin.yxblog.model.User" useGeneratedKeys="true" keyProperty="id">
    insert into yx_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            name,
            username,
            password,
            status,
        </trim>
        <trim prefix="values ("  suffix=")" suffixOverrides=",">
            #{id,jdbcType=INTEGER},
            #{name,jdbcType=VARCHAR},
            #{username,jdbcType=VARCHAR},
            #{password,jdbcType=VARCHAR},
            #{status,jdbcType=BIT},
        </trim>
  </insert>
    <insert id="insertSelective" parameterType="com.xin.yxblog.model.User" useGeneratedKeys="true" keyProperty="id">
        insert into yx_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id!=null ">id,</if>
            <if test="name!=null ">name,</if>
            <if test="username!=null ">username,</if>
            <if test="password!=null ">password,</if>
            <if test="status!=null ">status,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id!=null ">#{id,jdbcType=INTEGER},</if>
            <if test="name!=null ">#{name,jdbcType=VARCHAR},</if>
            <if test="username!=null ">#{username,jdbcType=VARCHAR},</if>
            <if test="password!=null ">#{password,jdbcType=VARCHAR},</if>
            <if test="status!=null ">#{status,jdbcType=BIT},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.xin.yxblog.model.User" useGeneratedKeys="true" keyProperty="id">
        update yx_user
        <set>
            <if test="name!=null ">name = #{name,jdbcType=VARCHAR},</if>
            <if test="username!=null ">username = #{username,jdbcType=VARCHAR},</if>
            <if test="password!=null ">password = #{password,jdbcType=VARCHAR},</if>
            <if test="status!=null ">status = #{status,jdbcType=BIT},</if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xin.yxblog.model.User" useGeneratedKeys="true" keyProperty="id">
    update yx_user
    <set>
        name = #{name,jdbcType=VARCHAR},
        username = #{username,jdbcType=VARCHAR},
        password = #{password,jdbcType=VARCHAR},
        status = #{status,jdbcType=BIT},
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="com.xin.yxblog.model.User" useGeneratedKeys="true" keyProperty="id">
    update yx_user
    <set>
        name = #{name,jdbcType=VARCHAR},
        username = #{username,jdbcType=VARCHAR},
        password = #{password,jdbcType=VARCHAR},
        status = #{status,jdbcType=BIT},
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>
